name: Auto-update Packages

on:
  schedule:
    # Run every 6 hours (at 00:00, 06:00, 12:00, and 18:00 UTC)
    - cron: '0 */6 * * *'

  workflow_dispatch:
    inputs:
      trigger_builds:
        description: 'Trigger COPR builds after update'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

  push:
    branches:
      - master
    paths:
      - '.github/workflows/auto-update.yml'
      - 'scripts/update-packages.sh'
      - 'scripts/fetch-version.sh'
      - 'scripts/trigger-copr.sh'

jobs:
  update-packages:
    name: Check for package updates
    runs-on: ubuntu-latest

    permissions:
      contents: write

    outputs:
      has_changes: ${{ steps.update.outputs.has_changes }}
      copr_behind: ${{ steps.copr_check.outputs.copr_behind }}
      behind_packages: ${{ steps.copr_check.outputs.behind_packages }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl git

      - name: Run update script
        id: update
        run: |
          chmod +x scripts/*.sh
          ./scripts/update-packages.sh | tee update-log.txt

          # Check if there are any changes
          CHANGES=$(git diff --name-only | wc -l)
          if [ "$CHANGES" -eq 0 ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "📋 No updates found"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📋 Updates detected! ($CHANGES files changed)"
          fi

      - name: Check COPR versions
        id: copr_check
        run: |
          echo "🔍 Checking COPR versions against current specs..."
          
          COPR_BEHIND=false
          BEHIND_PACKAGES=""
          
          # Function to check if a package is behind
          check_package() {
            local package_name="$1"
            local spec_file="$2"
            local version_extract_cmd="$3"
            
            echo "Checking $package_name..."
            
            # Get current version from spec
            CURRENT_VERSION=$(eval "$version_extract_cmd")
            echo "  Current: $CURRENT_VERSION"
            
            # Get COPR version - try latest_succeeded first, then latest
            COPR_DATA=$(curl -s "https://copr.fedorainfracloud.org/api_3/package/list?ownername=avengemedia&projectname=danklinux&packagename=$package_name")
            COPR_VERSION=$(echo "$COPR_DATA" | jq -r '.items[0].builds.latest_succeeded.version // .items[0].builds.latest.version // "not_found"')
            echo "  COPR: $COPR_VERSION"
            
            # Check if behind - only if we have a valid version to compare
            if [[ "$COPR_VERSION" == "not_found" || "$COPR_VERSION" == "null" ]]; then
              echo "  ⏳ $package_name has no successful builds yet - will build"
              COPR_BEHIND=true
              BEHIND_PACKAGES="$BEHIND_PACKAGES,$package_name"
            elif [[ "$COPR_VERSION" != *"$CURRENT_VERSION"* ]]; then
              echo "  🚨 $package_name is behind! (COPR: $COPR_VERSION vs Current: $CURRENT_VERSION)"
              COPR_BEHIND=true
              BEHIND_PACKAGES="$BEHIND_PACKAGES,$package_name"
            else
              echo "  ✅ $package_name is up to date"
            fi
            echo ""
          }
          
          # Check all packages (except dms-greeter)
          check_package "quickshell" "quickshell/quickshell.spec" "grep -oP '^%global tag\s+\K[0-9.]+' quickshell/quickshell.spec"
          check_package "quickshell-git" "quickshell/quickshell-git.spec" "grep -oP '^%global commit\s+\K[a-f0-9]+' quickshell/quickshell-git.spec | head -c 7"
          check_package "dgop" "avenge_media/dgop/dgop.spec" "grep -oP '^Version:\s+\K[0-9.]+' avenge_media/dgop/dgop.spec"
          check_package "cliphist" "cliphist/cliphist.spec" "grep -oP '^Version:\s+\K[0-9.]+' cliphist/cliphist.spec"
          check_package "matugen" "matugen/matugen.spec" "grep -oP '^Version:\s+\K[0-9.]+' matugen/matugen.spec"
          check_package "hyprpicker" "hyprpicker/hyprpicker.spec" "grep -oP '^Version:\s+\K[0-9.]+' hyprpicker/hyprpicker.spec"
          check_package "breakpad" "breakpad/breakpad.spec" "grep -oP '^Version:\s+\K[0-9.]+' breakpad/breakpad.spec"
          check_package "ghostty" "ghostty/ghostty.spec" "grep -oP '^Version:\s+\K[0-9.]+' ghostty/ghostty.spec"
          check_package "material-symbols-fonts" "fonts/material-symbols-fonts.spec" "grep -oP '^Version:\s+\K[0-9.]+' fonts/material-symbols-fonts.spec"
          
          # Clean up the packages list (remove leading comma)
          BEHIND_PACKAGES="${BEHIND_PACKAGES#,}"
          
          # Set outputs
          if [[ "$COPR_BEHIND" == "true" ]]; then
            echo "copr_behind=true" >> $GITHUB_OUTPUT
            echo "behind_packages=$BEHIND_PACKAGES" >> $GITHUB_OUTPUT
            echo "🚨 COPR is behind - builds needed for: $BEHIND_PACKAGES"
          else
            echo "copr_behind=false" >> $GITHUB_OUTPUT
            echo "behind_packages=" >> $GITHUB_OUTPUT
            echo "✅ All packages are up to date in COPR"
          fi

      - name: Debug outputs
        run: |
          echo "=== DEBUG OUTPUTS ==="
          echo "has_changes: ${{ steps.update.outputs.has_changes }}"
          echo "copr_behind: ${{ steps.copr_check.outputs.copr_behind }}"
          echo "trigger_builds: ${{ github.event.inputs.trigger_builds }}"
          echo "event_name: ${{ github.event_name }}"
          echo "Condition: (has_changes == 'true' || copr_behind == 'true') && (trigger_builds == 'true' || event_name == 'schedule' || event_name == 'push')"
          echo "===================="

      - name: Commit and push changes
        if: steps.update.outputs.has_changes == 'true'
        run: |
          # Get list of changed spec files for commit message
          CHANGED_SPECS=$(git diff --name-only | grep '\.spec$' | xargs basename -a | tr '\n' ', ' | sed 's/,$//')

          git add -A
          git commit -m "Auto-update packages: $CHANGED_SPECS

          🤖 Automated update by GitHub Actions

          Updated packages:
          $(git diff HEAD~1 --name-only | grep '\.spec$' | sed 's/^/  - /')

          Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          git push

      - name: Create update summary
        if: steps.update.outputs.has_changes == 'true'
        run: |
          echo "## 📦 Package Updates" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following packages were updated:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Parse update log for changes
          if grep -q "Update available" update-log.txt; then
            grep "Update available" update-log.txt | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changed Files" >> $GITHUB_STEP_SUMMARY
          git diff HEAD~1 --name-only | grep '\.spec$' | sed 's/^/- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View commit](https://github.com/${{ github.repository }}/commit/$(git rev-parse HEAD))" >> $GITHUB_STEP_SUMMARY

      - name: Upload update log
        if: steps.update.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: update-log-${{ github.run_number }}
          path: update-log.txt
          retention-days: 30

  trigger-copr-builds:
    name: Trigger COPR builds
    needs: update-packages
    runs-on: ubuntu-latest
    if: (needs.update-packages.outputs.has_changes == 'true' || needs.update-packages.outputs.copr_behind == 'true') && (github.event.inputs.trigger_builds == 'true' || github.event_name == 'schedule' || github.event_name == 'push')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Install COPR CLI
        run: |
          sudo dnf install -y copr-cli || sudo apt-get install -y copr-cli || {
            echo "⚠️ Could not install copr-cli via package manager"
            echo "Installing via pip..."
            pip install copr-cli
          }

      - name: Configure COPR
        env:
          COPR_CONFIG: ${{ secrets.COPR_CONFIG }}
        run: |
          if [[ -z "$COPR_CONFIG" ]]; then
            echo "❌ COPR_CONFIG secret not set"
            echo "Please add your COPR configuration as a repository secret named COPR_CONFIG"
            exit 1
          fi

          mkdir -p ~/.config
          echo "$COPR_CONFIG" > ~/.config/copr
          chmod 600 ~/.config/copr

      - name: Trigger builds
        env:
          BEHIND_PACKAGES: ${{ needs.update-packages.outputs.behind_packages }}
        run: |
          chmod +x scripts/trigger-copr.sh
          ./scripts/trigger-copr.sh

      - name: Build summary
        run: |
          echo "## 🚀 COPR Builds Triggered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Builds have been triggered for updated packages." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View builds](https://copr.fedorainfracloud.org/coprs/avengemedia/danklinux/builds/)" >> $GITHUB_STEP_SUMMARY

    outputs:
      has_changes: ${{ needs.update-packages.outputs.has_changes }}
